import logging
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from datetime import datetime
from sqlalchemy.orm import Session

from app.core.config import settings
from app.core.database import SessionLocal, User
from app.services.jira import JiraService
from app.utils.helpers import format_issue_message, format_datetime, parse_jira_datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class UserStates(state.StatesGroup):
    waiting_for_token = state.State()
    waiting_for_issue_key = state.State()

def get_db():
    db = SessionLocal()
    try:
        return db
    finally:
        db.close()

def format_worklog_message(worklog_entries: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—á–µ—Ç–æ–º –æ —Ä–∞–æ—Ç–µ."""
    if not worklog_entries:
        return "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞–±–æ—Ç–µ."
        
    message = "üìä *–û—Ç—á–µ—Ç –æ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è*\n\n"
    
    for issue_key, entries in worklog_entries.items():
        message += f"üîπ *–ó–∞–¥–∞—á–∞:* [{issue_key}]({settings.JIRA_URL}/browse/{issue_key})\n"
        message += f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {entries[0]['issue_summary']}\n\n"
        
        for entry in entries:
            date = parse_jira_datetime(entry['date']).strftime("%d-%m-%y %H:%M")
            message += f"‚è∞ {date}\n"
            message += f"‚åõÔ∏è *–ó–∞—Ç—Ä–∞—á–µ–Ω–æ:* {entry['time_spent']}\n"
            if entry['comment']:
                message += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n{entry['comment']}\n"
            message += "\n"
        
        message += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    return message

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Jira. "
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Jira —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_token\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_token - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω Jira\n"
        "/remove_token - –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω\n"
        "/get_issue - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ\n"
        "/worklog - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/set_token - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω Jira\n"
        "/remove_token - –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω\n"
        "/get_issue - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ\n"
        "/worklog - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

@dp.message_handler(commands=['worklog'])
async def worklog_command(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–±–æ—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    db = get_db()
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user or not user.jira_token:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_token —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Jira
        jira = JiraService(token=user.jira_token)
        worklog_entries = jira.get_recent_worklog()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = format_worklog_message(worklog_entries)
        await message.reply(response, parse_mode="Markdown", disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error getting worklog: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")

@dp.message_handler(commands=['set_token'])
async def set_token_command(message: types.Message):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await message.delete()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = get_db()
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if user and user.jira_token:
        await message.answer(
            "–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω. –•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π?\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /remove_token –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞, "
            "–∞ –∑–∞—Ç–µ–º /set_token –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ."
        )
        return
    
    await UserStates.waiting_for_token.set()
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω Jira.\n"
        "–ï–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Jira:\n"
        "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Profile -> Security -> Create and manage API tokens\n"
        "2. –ù–∞–∂–º–∏—Ç–µ Create API token\n"
        "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    )

@dp.message_handler(state=UserStates.waiting_for_token)
async def process_token(message: types.Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await message.delete()
    
    token = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    try:
        jira = JiraService(token=token)
        if not jira.test_connection():
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        user_info = jira.client.myself()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É
        db = get_db()
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        if user:
            user.jira_token = token
        else:
            user = User(telegram_id=message.from_user.id, jira_token=token)
            db.add(user)
        db.commit()
        
        await state.finish()
        await message.answer(
            f"‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
            f"–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: {user_info.get('displayName')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/worklog - –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è\n"
            f"/get_issue - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ"
        )
    except Exception as e:
        logger.error(f"Error setting token: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –¢–æ–∫–µ–Ω –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
            "2. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ Jira\n"
            "3. –¢–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞."
        )

@dp.message_handler(commands=['remove_token'])
async def remove_token_command(message: types.Message):
    db = get_db()
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if user and user.jira_token:
        user.jira_token = None
        db.commit()
        await message.reply(
            "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /set_token"
        )
    else:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω.")

@dp.message_handler(commands=['get_issue'])
async def get_issue_command(message: types.Message):
    await UserStates.waiting_for_issue_key.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PROJ-123):")

@dp.message_handler(state=UserStates.waiting_for_issue_key)
async def process_issue_key(message: types.Message, state: FSMContext):
    issue_key = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    db = get_db()
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    if not user or not user.jira_token:
        await message.reply("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_token —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.")
        await state.finish()
        return
    
    try:
        jira = JiraService(token=user.jira_token)
        issue = jira.get_issue(issue_key)
        
        response = format_issue_message(
            issue_key=issue.key,
            summary=issue.fields.summary,
            status=issue.fields.status.name
        )
        await message.reply(response)
    except Exception as e:
        logger.error(f"Error getting issue: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
    
    await state.finish()

async def on_startup(dp):
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown(dp):
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    from aiogram import executor
    executor.start_polling(
        dp,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True
    )
